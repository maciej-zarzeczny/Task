{"version":3,"sources":["features/planets/planetsSlice.js","app/components/StyledComponents.js","features/planets/PlanetsList.js","features/planets/Planet.js","features/starships/starshipsSlice.js","features/starships/StarshipsList.js","features/starships/Starship.js","features/vehicles/vehiclesSlice.js","features/vehicles/VehiclesList.js","features/vehicles/Vehicle.js","app/components/Navbar.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["fetchPlanets","createAsyncThunk","a","axios","get","response","data","results","planetsSlice","createSlice","name","initialState","status","planets","error","reducers","extraReducers","pending","state","action","fulfilled","concat","payload","rejected","selectAllPlanets","Title","styled","h1","LoaderWrapper","div","DataRow","Button","button","InfoContainer","Info","PlanetsList","content","dispatch","useDispatch","useSelector","Planet","planet","to","size","color","loading","map","idx","key","useEffect","planetName","match","params","find","selectPlanetByName","population","diameter","rotation_period","fetchStarships","starshipsSlice","starships","selectAllStarships","StarshipsList","Starship","starship","starshipName","selectStarshipByName","crew","length","passengers","fetchVehicles","vehiclesSLice","vehicles","selectAllVehicles","VehiclesList","Vehicle","vehicle","vehicleName","selectVehicleByName","NavWrapper","nav","NavItem","li","Navbar","Container","section","App","className","exact","path","component","configureStore","reducer","planetsReducer","starshipsReducer","vehiclesReducer","Boolean","window","location","hostname","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.87e59ed9.chunk.js","sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\n\nconst initialState = {\n  status: \"idle\",\n  planets: [],\n  error: null,\n};\n\nexport const fetchPlanets = createAsyncThunk(\"planets/fetchPlanets\", async () => {\n  const response = await axios.get(\"https://swapi.dev/api/planets/\");\n  return response.data.results;\n});\n\nconst planetsSlice = createSlice({\n  name: \"planets\",\n  initialState,\n  reducers: {},\n  extraReducers: {\n    [fetchPlanets.pending]: (state, action) => {\n      state.status = \"loading\";\n    },\n    [fetchPlanets.fulfilled]: (state, action) => {\n      state.status = \"succeeded\";\n      state.planets = state.planets.concat(action.payload);\n    },\n    [fetchPlanets.rejected]: (state, action) => {\n      state.status = \"failed\";\n      state.error = action.payload;\n    },\n  },\n});\n\nexport default planetsSlice.reducer;\n\nexport const selectAllPlanets = (state) => state.planets.planets;\n\nexport const selectPlanetByName = (state, planetName) =>\n  state.planets.planets.find((planet) => planet.name === planetName);\n","import styled from \"styled-components\";\n\nexport const Title = styled.h1`\n  text-align: center;\n  margin-bottom: 4rem;\n`;\n\nexport const LoaderWrapper = styled.div`\n  text-align: center;\n`;\n\nexport const DataRow = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 1rem;\n`;\n\nexport const Button = styled.button`\n  background-color: transparent;\n  outline: none;\n  cursor: pointer;\n  color: #fff;\n  background-color: #123abc;\n  font-weight: 600;\n  border: none;\n  border-radius: 5px;\n  font-size: 0.75rem;\n  padding: 0.5rem 0.75rem;\n\n  &:hover {\n    opacity: 0.8;\n  }\n`;\n\nexport const InfoContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 2rem;\n`;\n\nexport const Info = styled.div`\n  border-radius: 15px;\n  background-color: #f4f4f4;\n  padding: 2rem;\n  min-width: 10%;\n  text-align: center;\n`;\n","import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport ClipLoader from \"react-spinners/ClipLoader\";\nimport { Link } from \"react-router-dom\";\n\nimport { fetchPlanets, selectAllPlanets } from \"./planetsSlice\";\nimport { Title, LoaderWrapper, DataRow, Button } from \"../../app/components/StyledComponents\";\n\nexport const PlanetsList = () => {\n  const dispatch = useDispatch();\n  const planets = useSelector(selectAllPlanets);\n  const status = useSelector((state) => state.planets.status);\n  const error = useSelector((state) => state.planets.error);\n\n  const Planet = ({ planet }) => (\n    <DataRow>\n      <p>{planet.name}</p>\n      <Link to={`/planets/${planet.name}`}>\n        <Button>More info</Button>\n      </Link>\n    </DataRow>\n  );\n\n  let content;\n  if (status === \"loading\") {\n    content = (\n      <LoaderWrapper>\n        <ClipLoader size={32} color={\"#123abc\"} loading={status === \"loading\"} />\n      </LoaderWrapper>\n    );\n  } else if (status === \"succeeded\") {\n    content = planets.map((planet, idx) => <Planet key={idx} planet={planet} />);\n  } else if (status === \"failed\") {\n    content = error;\n  }\n\n  useEffect(() => {\n    if (status === \"idle\") {\n      dispatch(fetchPlanets());\n    }\n  }, [status, dispatch]);\n\n  return (\n    <>\n      <Title>Planets</Title>\n      {content}\n    </>\n  );\n};\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\n\nimport { selectPlanetByName } from \"./planetsSlice\";\nimport { Button, InfoContainer, Info } from \"../../app/components/StyledComponents\";\n\nexport const Planet = ({ match }) => {\n  const { planetName } = match.params;\n  const planet = useSelector((state) => selectPlanetByName(state, planetName));\n\n  return (\n    <>\n      <h1>{planetName}</h1>\n\n      <InfoContainer>\n        <Info>\n          <h4>{planet.population}</h4>\n          <p>Population</p>\n        </Info>\n        <Info>\n          <h4>{planet.diameter}</h4>\n          <p>Diameter</p>\n        </Info>\n        <Info>\n          <h4>{planet.rotation_period}</h4>\n          <p>Rotation period</p>\n        </Info>\n      </InfoContainer>\n\n      <Link to=\"/Task/\">\n        <Button>Back</Button>\n      </Link>\n    </>\n  );\n};\n","import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\n\nconst initialState = {\n  status: \"idle\",\n  starships: [],\n  error: null,\n};\n\nexport const fetchStarships = createAsyncThunk(\"starships/fetchStarships\", async () => {\n  const response = await axios.get(\"https://swapi.dev/api/vehicles/\");\n  return response.data.results;\n});\n\nconst starshipsSlice = createSlice({\n  name: \"starships\",\n  initialState,\n  reducers: {},\n  extraReducers: {\n    [fetchStarships.pending]: (state, action) => {\n      state.status = \"loading\";\n    },\n    [fetchStarships.fulfilled]: (state, action) => {\n      state.status = \"succeeded\";\n      state.starships = state.starships.concat(action.payload);\n    },\n    [fetchStarships.rejected]: (state, action) => {\n      state.status = \"failed\";\n      state.error = action.payload;\n    },\n  },\n});\n\nexport default starshipsSlice.reducer;\n\nexport const selectAllStarships = (state) => state.starships.starships;\n\nexport const selectStarshipByName = (state, starshipName) =>\n  state.starships.starships.find((starship) => starship.name === starshipName);\n","import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport ClipLoader from \"react-spinners/ClipLoader\";\nimport { Link } from \"react-router-dom\";\n\nimport { fetchStarships, selectAllStarships } from \"./starshipsSlice\";\nimport { Title, LoaderWrapper, DataRow, Button } from \"../../app/components/StyledComponents\";\n\nexport const StarshipsList = () => {\n  const dispatch = useDispatch();\n  const starships = useSelector(selectAllStarships);\n  const status = useSelector((state) => state.starships.status);\n  const error = useSelector((state) => state.starships.error);\n\n  const Starship = ({ starship }) => (\n    <DataRow>\n      <p>{starship.name}</p>\n      <Link to={`/starships/${starship.name}`}>\n        <Button>More info</Button>\n      </Link>\n    </DataRow>\n  );\n\n  let content;\n  if (status === \"loading\") {\n    content = (\n      <LoaderWrapper>\n        <ClipLoader size={32} color={\"#123abc\"} loading={status === \"loading\"} />\n      </LoaderWrapper>\n    );\n  } else if (status === \"succeeded\") {\n    content = starships.map((starship, idx) => <Starship key={idx} starship={starship} />);\n  } else if (status === \"failed\") {\n    content = error;\n  }\n\n  useEffect(() => {\n    if (status === \"idle\") {\n      dispatch(fetchStarships());\n    }\n  }, [status, dispatch]);\n\n  return (\n    <>\n      <Title>Starships</Title>\n\n      {content}\n    </>\n  );\n};\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\n\nimport { selectStarshipByName } from \"./starshipsSlice\";\nimport { Button, InfoContainer, Info } from \"../../app/components/StyledComponents\";\n\nexport const Starship = ({ match }) => {\n  const { starshipName } = match.params;\n  const starship = useSelector((state) => selectStarshipByName(state, starshipName));\n\n  return (\n    <>\n      <h1>{starshipName}</h1>\n\n      <InfoContainer>\n        <Info>\n          <h4>{starship.crew}</h4>\n          <p>Crew</p>\n        </Info>\n        <Info>\n          <h4>{starship.length}</h4>\n          <p>Length</p>\n        </Info>\n        <Info>\n          <h4>{starship.passengers}</h4>\n          <p>Passengers</p>\n        </Info>\n      </InfoContainer>\n\n      <Link to=\"/Task/starships\">\n        <Button>Back</Button>\n      </Link>\n    </>\n  );\n};\n","import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\n\nconst initialState = {\n  status: \"idle\",\n  vehicles: [],\n  error: null,\n};\n\nexport const fetchVehicles = createAsyncThunk(\"vehicles/fetchVehicles\", async () => {\n  const response = await axios.get(\"https://swapi.dev/api/vehicles/\");\n  return response.data.results;\n});\n\nconst vehiclesSLice = createSlice({\n  name: \"vehicles\",\n  initialState,\n  reducers: {},\n  extraReducers: {\n    [fetchVehicles.pending]: (state, action) => {\n      state.status = \"loading\";\n    },\n    [fetchVehicles.fulfilled]: (state, action) => {\n      state.status = \"succeeded\";\n      state.vehicles = state.vehicles.concat(action.payload);\n    },\n    [fetchVehicles.rejected]: (state, action) => {\n      state.status = \"failed\";\n      state.error = action.payload;\n    },\n  },\n});\n\nexport default vehiclesSLice.reducer;\n\nexport const selectAllVehicles = (state) => state.vehicles.vehicles;\n\nexport const selectVehicleByName = (state, vehicleName) =>\n  state.vehicles.vehicles.find((vehicle) => vehicle.name === vehicleName);\n","import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport ClipLoader from \"react-spinners/ClipLoader\";\nimport { Link } from \"react-router-dom\";\n\nimport { fetchVehicles, selectAllVehicles } from \"./vehiclesSlice\";\nimport { Title, LoaderWrapper, Button, DataRow } from \"../../app/components/StyledComponents\";\n\nexport const VehiclesList = () => {\n  const dispatch = useDispatch();\n  const vehicles = useSelector(selectAllVehicles);\n  const status = useSelector((state) => state.vehicles.status);\n  const error = useSelector((state) => state.vehicles.error);\n\n  const Vehicle = ({ vehicle }) => (\n    <DataRow>\n      <p>{vehicle.name}</p>\n      <Link to={`/vehicles/${vehicle.name}`}>\n        <Button>More info</Button>\n      </Link>\n    </DataRow>\n  );\n\n  let content;\n  if (status === \"loading\") {\n    content = (\n      <LoaderWrapper>\n        <ClipLoader size={32} color={\"#123abc\"} loading={status === \"loading\"} />\n      </LoaderWrapper>\n    );\n  } else if (status === \"succeeded\") {\n    content = vehicles.map((vehicle, idx) => <Vehicle key={idx} vehicle={vehicle} />);\n  } else if (status === \"failed\") {\n    content = error;\n  }\n\n  useEffect(() => {\n    if (status === \"idle\") {\n      dispatch(fetchVehicles());\n    }\n  }, [status, dispatch]);\n\n  return (\n    <>\n      <Title>Vehicles</Title>\n      {content}\n    </>\n  );\n};\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\n\nimport { selectVehicleByName } from \"./vehiclesSlice\";\nimport { Button, InfoContainer, Info } from \"../../app/components/StyledComponents\";\n\nexport const Vehicle = ({ match }) => {\n  const { vehicleName } = match.params;\n  const vehicle = useSelector((state) => selectVehicleByName(state, vehicleName));\n\n  return (\n    <>\n      <h1>{vehicleName}</h1>\n\n      <InfoContainer>\n        <Info>\n          <h4>{vehicle.crew}</h4>\n          <p>Crew</p>\n        </Info>\n        <Info>\n          <h4>{vehicle.length}</h4>\n          <p>Length</p>\n        </Info>\n        <Info>\n          <h4>{vehicle.passengers}</h4>\n          <p>Passengers</p>\n        </Info>\n      </InfoContainer>\n\n      <Link to=\"/Task/vehicles\">\n        <Button>Back</Button>\n      </Link>\n    </>\n  );\n};\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport styled from \"styled-components\";\n\nconst NavWrapper = styled.nav`\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: #1a1a1a;\n  padding: 2rem 0;\n`;\n\nconst NavItem = styled.li`\n  display: inline-block;\n  color: #fff;\n  margin: 0 2rem;\n  cursor: pointer;\n\n  &:hover {\n    opacity: 0.8;\n  }\n`;\n\nexport const Navbar = () => {\n  return (\n    <NavWrapper>\n      <ul>\n        <Link to=\"/Task/\">\n          <NavItem>Planets</NavItem>\n        </Link>\n\n        <Link to=\"/Task/starships\">\n          <NavItem>Starships</NavItem>\n        </Link>\n\n        <Link to=\"/Task/vehicles\">\n          <NavItem>Vehicles</NavItem>\n        </Link>\n      </ul>\n    </NavWrapper>\n  );\n};\n","import React from \"react\";\r\nimport { BrowserRouter as Router, Switch, Route, Redirect } from \"react-router-dom\";\r\n\r\nimport { PlanetsList } from \"./features/planets/PlanetsList\";\r\nimport { Planet } from \"./features/planets/Planet\";\r\n\r\nimport { StarshipsList } from \"./features/starships/StarshipsList\";\r\nimport { Starship } from \"./features/starships/Starship\";\r\n\r\nimport { VehiclesList } from \"./features/vehicles/VehiclesList\";\r\nimport { Vehicle } from \"./features/vehicles/Vehicle\";\r\n\r\nimport { Navbar } from \"./app/components/Navbar\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Container = styled.section`\r\n  max-width: 1000px;\r\n  margin: 2rem auto;\r\n`;\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <div className=\"App\">\r\n        <Navbar />\r\n        <Container>\r\n          <Switch>\r\n            <Route exact path=\"/Task/\" component={PlanetsList} />\r\n            <Route exact path=\"/Task/planets/:planetName\" component={Planet} />\r\n\r\n            <Route exact path=\"/Task/starships\" component={StarshipsList} />\r\n            <Route exact path=\"/Task/starships/:starshipName\" component={Starship} />\r\n\r\n            <Route exact path=\"/Task/vehicles\" component={VehiclesList} />\r\n            <Route exact path=\"/Task/vehicles/:vehicleName\" component={Vehicle} />\r\n\r\n            <Redirect to=\"/Task\" />\r\n          </Switch>\r\n        </Container>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\n\r\nimport planetsReducer from \"../features/planets/planetsSlice\";\r\nimport starshipsReducer from \"../features/starships/starshipsSlice\";\r\nimport vehiclesReducer from \"../features/vehicles/vehiclesSlice\";\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    planets: planetsReducer,\r\n    starships: starshipsReducer,\r\n    vehicles: vehiclesReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}